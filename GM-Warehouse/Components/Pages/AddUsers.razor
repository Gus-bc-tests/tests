@page "/add-user"
@using System.ComponentModel.DataAnnotations
@using GM_Warehouse.Components.Models.CreateModels
@using GM_Warehouse.Components.Models.Enums
@using GM_Warehouse.Components.Models.ViewModels
@using GM_Warehouse.Components.Services

@inject UserService _userService

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudTextField T="string" Label="Name" @bind-Value="_userCreateModel.Name" 
                              Required="true" RequiredError="Name is required!" 
                              Validation="@(new MaxLengthAttribute(15) {ErrorMessage = "Name is too long"})" />
                <MudTextField T="string" Label="Email" @bind-Value="_userCreateModel.Mail" 
                              Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Phone" @bind-Value="_userCreateModel.Phone" 
                              MaxLength="15"
                              Validation="@(new RegularExpressionAttribute(@"([\+][(]?[0-9]{2}[0-9]?[)]?[-\s\\.]?[0-9]{3}[-\s\.]?[0-9]{4,6})|(([\+][(]?[0-9]{2}[0-9]?[)])?([0-9]{2}([-\s\.]?[0-9]{2}){3}))") {ErrorMessage = "The phone number is invalid"})" />
                <MudSelect T="UserPrivileges" Label="Privileges" @bind-Value="_userCreateModel.Privileges" 
                           Required="true" RequiredError="Please select a privilege!">
                    @foreach (var privilege in Enum.GetValues<UserPrivileges>())
                    {
                        <MudSelectItem Value="privilege">@privilege.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => _form.ResetAsync())" Class="mx-2">
                Reset
            </MudButton>
            <MudButton Variant="Variant.Filled" OnClick="@OnSubmit" Disabled="@(!_success)">
                Submit
            </MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({_errors.Length})")</MudText>
            @foreach (var error in _errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<MudDataGrid T="UserViewModel" Items="@_users" Filterable="true" MultiSelection="false"
    SortMode="SortMode.Multiple">
    <ToolBarContent>
        <MudText Typo="Typo.h6">System Users</MudText>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="u => u.Name" Title="Name" />
        <PropertyColumn Property="u => u.Mail" Title="Email" />
        <PropertyColumn Property="u => u.Phone" Title="Phone" />
        <PropertyColumn Property="u => u.Privileges" Title="Privileges" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserViewModel" />
    </PagerContent>
</MudDataGrid>

@code {
    private MudForm _form = new();
    private UserCreateModel _userCreateModel = new();
    private bool _success;
    private string[] _errors = { };
    private List<UserViewModel> _users = new();
    private string _searchString = string.Empty;

    private async Task OnSubmit()
    {
        await _form.Validate();
        if (_success)
        {
            try
            {
                await _form.Validate();
                await _userService.AddUserAsync(_userCreateModel); // Add new user
                await LoadUsers(); // Refresh the users list
                await _form.ResetAsync(); // Reset the form
                _userCreateModel = new UserCreateModel(); // Clear the model
            }
            catch (Exception ex)
            {
                _errors = [ex.Message]; // Display any service errors
            }
            StateHasChanged();
        }
    }

    private async Task LoadUsers()
    {
        _users = await _userService.GetAllUser() as List<UserViewModel> ?? [] ; 
    }
    

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers(); 
    }
}
